{"version":3,"sources":["logo.svg","context/MapContext.js","components/Map.js","components/Questionnaire.js","components/Controls.js","App.js","reportWebVitals.js","index.js"],"names":["GlobalContext","createContext","GlobalProvider","props","useState","mapPanZoom","setMapPanZoom","rootFocus","useRef","questionaireBinary","setQuestionnaireBinary","Provider","value","focusRoot","current","focus","children","svgPanZoom","require","Map","svgEl","useContext","classes","makeStyles","theme","map","flex","margin","border","svg","height","width","useStyles","className","handleKeys","onKeyEvent","src","process","onError","e","onLoad","foo","zoomEnabled","dblClickZoomEnabled","zoomAtPoint","x","y","innerRef","appBar","position","title","marginLeft","spacing","RadioButtonsGroup","onChange","buttonId","React","setValue","FormControl","component","RadioGroup","name","event","target","row","FormControlLabel","control","Radio","label","Transition","forwardRef","ref","Slide","direction","Questionnaire","open","setOpen","handleClose","onButtonPress","id","response","questions","console","log","updateBinaryNumber","temp","forEach","question","Button","variant","color","onClick","Dialog","fullScreen","onClose","TransitionComponent","AppBar","Toolbar","IconButton","edge","Typography","autoFocus","List","ListItem","ListItemText","primary","Divider","attributes","display","flexDirection","backgroundColor","attribute","stroke","strokeWidth","buttons","justify","Controls","zoomIn","zoomOut","resetZoom","root","minHeight","App","flexBoxClasses","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2b331995.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { createContext, useState, useRef } from \"react\";\n\n//create a context, with createContext api\nexport const GlobalContext = createContext();\n\nconst GlobalProvider = (props) => {\n  // this state will be shared with all components\n  const [mapPanZoom, setMapPanZoom] = useState();\n  const rootFocus = useRef(null);\n  const [questionaireBinary, setQuestionnaireBinary] = useState(0);\n\n  const focusRoot = () => {\n    if (rootFocus.current) {\n      rootFocus.current.focus();\n    }\n  };\n\n  return (\n    <GlobalContext.Provider\n      value={{\n        mapPanZoom,\n        setMapPanZoom,\n        rootFocus,\n        focusRoot,\n        questionaireBinary,\n        setQuestionnaireBinary,\n      }}\n    >\n      {props.children}\n    </GlobalContext.Provider>\n  );\n};\n\nexport default GlobalProvider;\n","import { makeStyles } from \"@material-ui/styles\";\nimport React, { useRef, useContext } from \"react\";\nimport { GlobalContext } from \"../context/MapContext\";\nimport SVG from \"react-inlinesvg\";\nimport KeyboardEventHandler from \"react-keyboard-event-handler\";\nconst svgPanZoom = require(\"svg-pan-zoom\");\n\nfunction Map() {\n  // useRef References\n  const svgEl = useRef(null);\n  const { mapPanZoom, setMapPanZoom, focusRoot } = useContext(GlobalContext);\n  // CSS\n  const useStyles = makeStyles((theme) => ({\n    map: {\n      flex: 3,\n      margin: 10,\n      border: \"8px black\",\n    },\n    svg: {\n      height: \"100%\",\n      width: \"100%\",\n    },\n  }));\n\n  // Placeholder\n  const onError = (e) => {};\n\n  // Placeholder\n  const onLoad = (e) => {\n    const foo = svgPanZoom(svgEl.current, {\n      zoomEnabled: true,\n      dblClickZoomEnabled: false,\n      // controlIconsEnabled: false,\n    });\n    foo.zoomAtPoint(1, { x: 447, y: 183 });\n    setMapPanZoom(foo);\n  };\n\n  const classes = useStyles();\n\n  return (\n    <KeyboardEventHandler\n      className={classes.map}\n      handleKeys={[\"esc\"]}\n      onKeyEvent={focusRoot}\n    >\n      <SVG\n        className={classes.svg}\n        src={`${process.env.PUBLIC_URL}/svg/focus-test.svg`}\n        onError={onError}\n        onLoad={onLoad}\n        innerRef={svgEl}\n      />\n    </KeyboardEventHandler>\n  );\n}\n\nexport default Map;\n","import React, { useContext, useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport List from \"@material-ui/core/List\";\nimport Divider from \"@material-ui/core/Divider\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport Slide from \"@material-ui/core/Slide\";\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport { GlobalContext } from \"../context/MapContext\";\n\nconst useStyles = makeStyles((theme) => ({\n  appBar: {\n    position: \"relative\",\n  },\n  title: {\n    marginLeft: theme.spacing(2),\n    flex: 1,\n  },\n}));\nconst RadioButtonsGroup = ({ onChange, buttonId }) => {\n  const [value, setValue] = React.useState(\"null\");\n\n  const handleChange = (event) => {\n    onChange(buttonId, event.target.value);\n    setValue(event.target.value);\n  };\n\n  return (\n    <FormControl component=\"fieldset\">\n      {/* <FormLabel component=\"legend\">Response</FormLabel> */}\n      <RadioGroup\n        aria-label=\"gender\"\n        name=\"gender1\"\n        value={value}\n        onChange={handleChange}\n        row\n      >\n        <FormControlLabel value=\"yes\" control={<Radio />} label=\"Yes\" />\n        <FormControlLabel value=\"no\" control={<Radio />} label=\"No\" />\n      </RadioGroup>\n    </FormControl>\n  );\n};\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nexport default function Questionnaire() {\n  const { setQuestionnaireBinary } = useContext(GlobalContext);\n  const classes = useStyles();\n  const [open, setOpen] = useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const onButtonPress = (id, response) => {\n    questions[id].response = response == \"yes\" ? 1 : 0;\n    console.log(questions);\n    updateBinaryNumber();\n  };\n\n  const updateBinaryNumber = () => {\n    let temp = 0;\n    // Binary number would be {question 7 response}{question 6 response}...{question 1 response}\n    // 000000001 & 10000000 = 0 = 0\n    // 1101 & 1000000101 = 0101 = 5\n    // 13 & 69 = 5\n    questions.forEach((question) => {\n      temp += question.response * 2 ** question.id;\n    });\n    setQuestionnaireBinary(temp);\n  };\n\n  let questions = [\n    {\n      id: 0,\n      question: \"Do you experience a motor impairment?\",\n      response: 0,\n    },\n    {\n      id: 1,\n      question: \"Do you experience a colour impairment?\",\n      response: 0,\n    },\n    {\n      id: 2,\n      question: \"Do you have low vision?\",\n      response: 0,\n    },\n    {\n      id: 3,\n      question: \"Do you experience total blindness?\",\n      response: 0,\n    },\n    {\n      id: 4,\n      question: \"Do you have difficulty reading?\",\n      response: 0,\n    },\n    {\n      id: 5,\n      question: \"Do you have difficulties operating doors?\",\n      response: 0,\n    },\n    {\n      id: 6,\n      question: \"Do obstacles disrupt your indoor navigation?\",\n      response: 0,\n    },\n  ];\n\n  return (\n    <div>\n      <Button variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\n        Open full-screen dialog\n      </Button>\n      <Dialog\n        fullScreen\n        open={open}\n        onClose={handleClose}\n        TransitionComponent={Transition}\n      >\n        <AppBar className={classes.appBar}>\n          <Toolbar>\n            <IconButton\n              edge=\"start\"\n              color=\"inherit\"\n              onClick={handleClose}\n              aria-label=\"close\"\n            >\n              <CloseIcon />\n            </IconButton>\n            <Typography variant=\"h6\" className={classes.title}>\n              Map Questionnaire\n            </Typography>\n            <Button autoFocus color=\"inherit\" onClick={handleClose}>\n              save\n            </Button>\n          </Toolbar>\n        </AppBar>\n        <List>\n          {questions.map((question) => (\n            <>\n              <ListItem key={question.id}>\n                <ListItemText primary={question.question} />\n                <RadioButtonsGroup\n                  onChange={onButtonPress}\n                  buttonId={question.id}\n                />\n              </ListItem>\n              <Divider />\n            </>\n          ))}\n        </List>\n      </Dialog>\n    </div>\n  );\n}\n","import React, { useContext } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Questionnaire from \"./Questionnaire\";\nimport { GlobalContext } from \"../context/MapContext\";\n\nconst useStyles = makeStyles((theme) => ({\n  attributes: {\n    flex: 1,\n    margin: 10,\n    display: \"flex\",\n    flexDirection: \"column\",\n    backgroundColor: \"whitesmoke\",\n  },\n  attribute: { flex: 4, margin: 10, stroke: \"black\", strokeWidth: 5 },\n  buttons: {\n    flex: 1,\n    margin: 10,\n    display: \"flex\",\n    justify: \"space-between\",\n    flexDirection: \"row\",\n  },\n}));\n\nfunction Controls() {\n  const classes = useStyles();\n  const { mapPanZoom, setMapPanZoom, rootFocus } = useContext(GlobalContext);\n\n  return (\n    <div className={classes.attributes}>\n      <div className={classes.attribute}>\n        <label ref={rootFocus}>\n          Questionnaire\n          <Questionnaire />\n        </label>\n      </div>\n      <div className={classes.attribute}>\n        <h1>Hey</h1>\n      </div>\n      <div className={classes.attribute}>\n        <h1>Hey</h1>\n      </div>\n      <div className={classes.buttons}>\n        {mapPanZoom && (\n          <>\n            <label>\n              Zoom In\n              <button onClick={() => mapPanZoom.zoomIn()}>+</button>\n            </label>\n            <label>\n              Zoom Out\n              <button onClick={() => mapPanZoom.zoomOut()}>-</button>\n            </label>\n            <label>\n              Reset\n              <button onClick={() => mapPanZoom.resetZoom()}>x</button>\n            </label>\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default Controls;\n","import React, { useRef, useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Map from \"./components/Map\";\nimport Controls from \"./components/Controls\";\nimport GlobalProvider from \"./context/MapContext\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    minHeight: \"90vh\",\n    width: \"100%\",\n    display: \"flex\",\n    flexDirection: \"row\",\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const flexBoxClasses = useStyles();\n\n  return (\n    <GlobalProvider>\n      <div className={flexBoxClasses.root}>\n        <Map />\n        <Controls />\n      </div>\n    </GlobalProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
{"version":3,"sources":["logo.svg","context/GlobalContext.js","components/Map.js","context/QuestionnaireContext.js","hooks/useQuestions.js","components/Questionnaire.js","components/Controls.js","App.js","reportWebVitals.js","index.js"],"names":["GlobalContext","createContext","GlobalProvider","props","useState","mapPanZoom","setMapPanZoom","rootFocus","useRef","Provider","value","focusRoot","current","focus","children","svgPanZoom","require","Map","svgEl","useContext","classes","makeStyles","theme","map","flex","margin","border","svg","height","width","useStyles","className","handleKeys","onKeyEvent","src","process","onError","e","onLoad","foo","zoomEnabled","dblClickZoomEnabled","zoomAtPoint","x","y","innerRef","QuestionnaireContext","QuestionnaireProvider","orginalQuestions","question","response","editableResponse","setEditableResponse","commitedResponse","setCommitedResponse","LOCAL_STORAGE_KEY","useEffect","initialResponse","pullResponseLocalStorage","clonedIntitialResponseEditable","clonedIntitialResponseCommited","localStorage","JSON","parse","getItem","err","console","error","pushResponseLocalStorage","log","setItem","stringify","editResponse","i","j","_commitResponse","resetResponse","clonedCommitedResponse","useQuestions","responseBinary","setResponseBinary","commitResponse","clonedEditedResponse","acm","counter","length","updateBinaryNumber","appBar","position","title","marginLeft","spacing","RadioButtonsGroup","onChange","FormControl","component","RadioGroup","name","row","FormControlLabel","control","Radio","label","Transition","React","forwardRef","ref","Slide","direction","Questionnaire","setQuestionnaireBinary","open","setOpen","handleClose","Button","variant","color","onClick","Dialog","fullScreen","onClose","TransitionComponent","AppBar","Toolbar","IconButton","edge","Typography","autoFocus","List","Fragment","ListItem","ListItemText","primary","target","Divider","attributes","display","flexDirection","backgroundColor","attribute","stroke","strokeWidth","buttons","justify","Controls","zoomIn","zoomOut","resetZoom","root","minHeight","App","flexBoxClasses","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9b65509f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { createContext, useState, useRef } from \"react\";\r\n\r\n//create a context, with createContext api\r\nexport const GlobalContext = createContext();\r\n\r\nconst GlobalProvider = (props) => {\r\n  // this state will be shared with all components\r\n  const [mapPanZoom, setMapPanZoom] = useState();\r\n  const rootFocus = useRef(null);\r\n\r\n  const focusRoot = () => {\r\n    if (rootFocus.current) {\r\n      rootFocus.current.focus();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <GlobalContext.Provider\r\n      value={{\r\n        mapPanZoom,\r\n        setMapPanZoom,\r\n        rootFocus,\r\n        focusRoot\r\n      }}\r\n    >\r\n      {props.children}\r\n    </GlobalContext.Provider>\r\n  );\r\n};\r\n\r\nexport default GlobalProvider;\r\n","import { makeStyles } from \"@material-ui/styles\";\r\nimport React, { useRef, useContext } from \"react\";\r\nimport { GlobalContext } from \"../context/GlobalContext\";\r\nimport SVG from \"react-inlinesvg\";\r\nimport KeyboardEventHandler from \"react-keyboard-event-handler\";\r\nconst svgPanZoom = require(\"svg-pan-zoom\");\r\n\r\nfunction Map() {\r\n  // useRef References\r\n  const svgEl = useRef(null);\r\n  const { mapPanZoom, setMapPanZoom, focusRoot } = useContext(GlobalContext);\r\n  // CSS\r\n  const useStyles = makeStyles((theme) => ({\r\n    map: {\r\n      flex: 3,\r\n      margin: 10,\r\n      border: \"8px black\",\r\n    },\r\n    svg: {\r\n      height: \"100%\",\r\n      width: \"100%\",\r\n    },\r\n  }));\r\n\r\n  // Placeholder\r\n  const onError = (e) => {};\r\n\r\n  // Placeholder\r\n  const onLoad = (e) => {\r\n    const foo = svgPanZoom(svgEl.current, {\r\n      zoomEnabled: true,\r\n      dblClickZoomEnabled: false,\r\n      // controlIconsEnabled: false,\r\n    });\r\n    foo.zoomAtPoint(1, { x: 447, y: 183 });\r\n    setMapPanZoom(foo);\r\n  };\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <KeyboardEventHandler\r\n      className={classes.map}\r\n      handleKeys={[\"esc\"]}\r\n      onKeyEvent={focusRoot}\r\n    >\r\n      <SVG\r\n        className={classes.svg}\r\n        src={`${process.env.PUBLIC_URL}/svg/focus-test.svg`}\r\n        onError={onError}\r\n        onLoad={onLoad}\r\n        innerRef={svgEl}\r\n      />\r\n    </KeyboardEventHandler>\r\n  );\r\n}\r\n\r\nexport default Map;\r\n","import { createContext, useState, useEffect} from \"react\";\r\nimport useQuestions from \"../hooks/useQuestions\";\r\n\r\n//create a context, with createContext api\r\nexport const QuestionnaireContext = createContext();\r\n\r\nconst QuestionnaireProvider = (props) => {\r\n  const {editableResponse, commitedResponse, editResponse, _commitResponse, resetResponse} = useQuestions();\r\n  const [responseBinary, setResponseBinary] = useState(null)\r\n\r\n  const updateBinaryNumber = (response) => {\r\n    if (response) {\r\n      // acm => Accumulator\r\n      let acm = 0;\r\n      // Binary number would be {question 7 response}{question 6 response}...{question 1 response}\r\n      // 000000001 & 10000000 = 0 = 0\r\n      // 1101 & 1000000101 = 0101 = 5\r\n      // 13 & 69 = 5\r\n      let counter = 0;\r\n      while (counter < response.length) {\r\n        let responseNumber = response[counter].response == \"yes\" ? 1 : 0;\r\n        acm += responseNumber * (2 ** counter);\r\n        counter++;\r\n      }\r\n      setResponseBinary(acm);\r\n    } else {\r\n      setResponseBinary(0)\r\n    }\r\n  };\r\n\r\n  const commitResponse = () => {\r\n    const clonedEditedResponse = editableResponse.map((foo)=>{return {...foo}})\r\n    _commitResponse(clonedEditedResponse)\r\n    updateBinaryNumber(clonedEditedResponse)\r\n  }\r\n  \r\n\r\n  return (\r\n    <QuestionnaireContext.Provider\r\n      value={{editableResponse, commitedResponse, editResponse, commitResponse, resetResponse, responseBinary}}\r\n    >\r\n      {props.children}\r\n    </QuestionnaireContext.Provider>\r\n  );\r\n};\r\n\r\nexport default QuestionnaireProvider;\r\n","import { useState, useEffect} from 'react';\r\n\r\n\r\nexport default function useQuestions() {\r\n    // original questions\r\n    const orginalQuestions = [\r\n        {\r\n          question: \"Do you experience a motor impairment?\",\r\n          response: null,\r\n        },\r\n        {\r\n          question: \"Do you experience a colour impairment?\",\r\n          response: null,\r\n        },\r\n        {\r\n          question: \"Do you have low vision?\",\r\n          response: null,\r\n        },\r\n        {\r\n          question: \"Do you experience total blindness?\",\r\n          response: null,\r\n        },\r\n        {\r\n          question: \"Do you have difficulty reading?\",\r\n          response: null,\r\n        },\r\n        {\r\n          question: \"Do you have difficulties operating doors?\",\r\n          response: null,\r\n        },\r\n        {\r\n          question: \"Do obstacles disrupt your indoor navigation?\",\r\n          response: null,\r\n        },\r\n      ];\r\n    const [editableResponse, setEditableResponse] = useState(null)\r\n    const [commitedResponse, setCommitedResponse] = useState(null)\r\n    const LOCAL_STORAGE_KEY = 'response'\r\n\r\n\r\n    useEffect(()=>{\r\n        // Get Questions From Local Storage\r\n        const initialResponse = pullResponseLocalStorage() || orginalQuestions\r\n        const clonedIntitialResponseEditable = initialResponse.map((foo)=>{return {...foo}})\r\n        const clonedIntitialResponseCommited = initialResponse.map((foo)=>{return {...foo}})\r\n        setEditableResponse(clonedIntitialResponseEditable)\r\n        setCommitedResponse(clonedIntitialResponseCommited)\r\n\r\n        return () => {}\r\n      }, [])\r\n\r\n  \r\n    const editResponse = (i, response) => {\r\n      setEditableResponse(\r\n        editableResponse.map((question, j)=>{\r\n          if (i == j) {\r\n            question.response = response\r\n          }\r\n          return question\r\n        })\r\n      )\r\n    }\r\n\r\n    const _commitResponse = (response) => {\r\n      setCommitedResponse(response)\r\n      pushResponseLocalStorage(response)\r\n    }\r\n\r\n    const resetResponse = () => {\r\n      const clonedCommitedResponse = commitedResponse.map((foo)=>{return {...foo}})\r\n      setEditableResponse(clonedCommitedResponse)\r\n    }\r\n\r\n    const pullResponseLocalStorage = () => {\r\n        if (typeof localStorage !== 'undefined') {\r\n          try {\r\n            return JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));\r\n          } catch (err) {\r\n            console.error(err)\r\n          }\r\n        }\r\n        // If Local Storage Unavailable or JSON parsing fails, then return null\r\n        return null\r\n    }\r\n\r\n    const pushResponseLocalStorage = (response) => {\r\n      if (typeof localStorage !== 'undefined') {\r\n        console.log(response)\r\n        localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(response));\r\n        return true\r\n      } else {\r\n          return false\r\n      }\r\n    }\r\n\r\n    return {editableResponse, commitedResponse, editResponse, _commitResponse, resetResponse}\r\n}","import React, { useContext, useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport List from \"@material-ui/core/List\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport Slide from \"@material-ui/core/Slide\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport { GlobalContext } from \"../context/GlobalContext\";\r\nimport useQuestions from \"../hooks/useQuestions\";\r\nimport { QuestionnaireContext } from \"../context/QuestionnaireContext\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  appBar: {\r\n    position: \"relative\",\r\n  },\r\n  title: {\r\n    marginLeft: theme.spacing(2),\r\n    flex: 1,\r\n  },\r\n}));\r\nconst RadioButtonsGroup = ({ onChange, value }) => {\r\n\r\n  return (\r\n    <FormControl component=\"fieldset\">\r\n      {/* <FormLabel component=\"legend\">Response</FormLabel> */}\r\n      <RadioGroup\r\n        aria-label=\"gender\"\r\n        name=\"gender1\"\r\n        value={value}\r\n        onChange={onChange}\r\n        row\r\n      >\r\n        <FormControlLabel value=\"yes\" control={<Radio />} label=\"Yes\" />\r\n        <FormControlLabel value=\"no\" control={<Radio />} label=\"No\" />\r\n      </RadioGroup>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nexport default function Questionnaire() {\r\n  const { setQuestionnaireBinary } = useContext(GlobalContext);\r\n  const { editableResponse, commitedResponse, editResponse, commitResponse, resetResponse} = useContext(QuestionnaireContext)\r\n  const classes = useStyles();\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    resetResponse();\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleSave = () => {\r\n    // updatingBinary\r\n    commitResponse()\r\n    setOpen(false);\r\n  }\r\n\r\n\r\n  return (\r\n    <div>\r\n      <Button variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\r\n        Open Questionnaire\r\n      </Button>\r\n      <Dialog\r\n        fullScreen\r\n        open={open}\r\n        onClose={handleClose}\r\n        TransitionComponent={Transition}\r\n      >\r\n        <AppBar className={classes.appBar}>\r\n          <Toolbar>\r\n            <IconButton\r\n              edge=\"start\"\r\n              color=\"inherit\"\r\n              onClick={handleClose}\r\n              aria-label=\"close\"\r\n            >\r\n              <CloseIcon />\r\n            </IconButton>\r\n            <Typography variant=\"h6\" className={classes.title}>\r\n              Map Questionnaire\r\n            </Typography>\r\n            <Button autoFocus color=\"inherit\" onClick={handleSave}>\r\n              save\r\n            </Button>\r\n          </Toolbar>\r\n        </AppBar>\r\n        <List>\r\n          {\r\n          editableResponse &&\r\n            editableResponse.map((question, i) => (\r\n              <React.Fragment key={i}>\r\n                <ListItem >\r\n                  <ListItemText primary={question.question} />\r\n                  <RadioButtonsGroup\r\n                    onChange={(e)=>{editResponse(i, e.target.value)}}\r\n                    value={question.response}\r\n                  />\r\n                </ListItem>\r\n                <Divider />\r\n              </React.Fragment>\r\n            ))}\r\n        </List>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useContext } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Questionnaire from \"./Questionnaire\";\r\nimport { GlobalContext } from \"../context/GlobalContext\";\r\nimport { QuestionnaireContext } from \"../context/QuestionnaireContext\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  attributes: {\r\n    flex: 1,\r\n    margin: 10,\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    backgroundColor: \"whitesmoke\",\r\n  },\r\n  attribute: { flex: 4, margin: 10, stroke: \"black\", strokeWidth: 5 },\r\n  buttons: {\r\n    flex: 1,\r\n    margin: 10,\r\n    display: \"flex\",\r\n    justify: \"space-between\",\r\n    flexDirection: \"row\",\r\n  },\r\n}));\r\n\r\nfunction Controls() {\r\n  const classes = useStyles();\r\n  const { mapPanZoom, setMapPanZoom, rootFocus } = useContext(GlobalContext);\r\n  const { responseBinary} = useContext(QuestionnaireContext)\r\n\r\n  return (\r\n    <div className={classes.attributes}>\r\n      <div className={classes.attribute}>\r\n        <label ref={rootFocus}>\r\n          Questionnaire\r\n          <Questionnaire />\r\n        </label>\r\n      </div>\r\n      <div className={classes.attribute}>\r\n        <h1>Bit Stuffing</h1>\r\n        <h1>{responseBinary}</h1>\r\n      </div>\r\n      <div className={classes.attribute}>\r\n        <h1>Example Controls</h1>\r\n      </div>\r\n      <div className={classes.buttons}>\r\n        {mapPanZoom && (\r\n          <>\r\n            <label>\r\n              Zoom In\r\n              <button onClick={() => mapPanZoom.zoomIn()}>+</button>\r\n            </label>\r\n            <label>\r\n              Zoom Out\r\n              <button onClick={() => mapPanZoom.zoomOut()}>-</button>\r\n            </label>\r\n            <label>\r\n              Reset\r\n              <button onClick={() => mapPanZoom.resetZoom()}>x</button>\r\n            </label>\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Controls;\r\n","import React, { useRef, useState } from \"react\";\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Map from \"./components/Map\";\r\nimport Controls from \"./components/Controls\";\r\nimport GlobalProvider from \"./context/GlobalContext\";\r\nimport QuestionnaireProvider from \"./context/QuestionnaireContext\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    minHeight: \"90vh\",\r\n    width: \"100%\",\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n  },\r\n}));\r\n\r\nfunction App() {\r\n  const classes = useStyles();\r\n  const flexBoxClasses = useStyles();\r\n\r\n  return (\r\n    <GlobalProvider>\r\n      <QuestionnaireProvider>\r\n        <div className={flexBoxClasses.root}>\r\n          <Map />\r\n          <Controls />\r\n        </div>\r\n      </QuestionnaireProvider>\r\n    </GlobalProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}